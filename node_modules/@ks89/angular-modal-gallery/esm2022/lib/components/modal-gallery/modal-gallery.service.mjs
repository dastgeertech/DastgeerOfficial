import { EventEmitter, Injectable } from '@angular/core';
import { OverlayConfig } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { ModalGalleryRef } from './modal-gallery-ref';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "../../services/config.service";
const DEFAULT_DIALOG_CONFIG = {
    hasBackdrop: true,
    backdropClass: 'ks-modal-gallery-backdrop',
    panelClass: 'ks-modal-gallery-panel'
};
export class ModalGalleryService {
    constructor(overlay, configService) {
        this.overlay = overlay;
        this.configService = configService;
        this.updateImages = new Subject();
        this.updateImages$ = this.updateImages.asObservable();
        this.triggerAttachToOverlay = new EventEmitter();
    }
    /**
     * Method to open modal gallery passing the configuration
     * @param config ModalGalleryConfig that contains: id, array of images, current image and optionally the configuration object
     * @return ModalGalleryRef | undefined is the object used to listen for events.
     */
    open(config) {
        // Returns an OverlayRef which is a PortalHost
        const overlayRef = this.createOverlay();
        // Instantiate a reference to the dialog
        this.dialogRef = new ModalGalleryRef(overlayRef);
        // Attach dialog container
        this.triggerAttachToOverlay.emit({
            overlayRef,
            config,
            dialogRef: this.dialogRef
        });
        overlayRef.backdropClick().subscribe(() => {
            if (this.dialogRef) {
                this.dialogRef.closeModal();
            }
        });
        return this.dialogRef;
    }
    /**
     * Method to close a modal gallery previously opened.
     * @param id Unique identifier of the modal gallery
     * @param clickOutside boolean is true if closed clicking on the modal backdrop, false otherwise.
     */
    close(id, clickOutside) {
        const libConfig = this.configService.getConfig(id);
        if (clickOutside) {
            if (this.dialogRef && libConfig && libConfig.enableCloseOutside) {
                this.dialogRef.closeModal();
            }
        }
        else {
            if (this.dialogRef) {
                this.dialogRef.closeModal();
            }
        }
    }
    /**
     * Method to update images array.
     * @param images Image[] updated array of images
     */
    updateModalImages(images) {
        this.updateImages.next(images);
    }
    /**
     * Method to emit close event.
     * @param event ImageModalEvent is the event payload
     */
    emitClose(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitClose(event);
    }
    /**
     * Method to emit show event.
     * @param event ImageModalEvent is the event payload
     */
    emitShow(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitShow(event);
    }
    /**
     * Method to emit firstImage event.
     * @param event ImageModalEvent is the event payload
     */
    emitFirstImage(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitFirstImage(event);
    }
    /**
     * Method to emit lastImage event.
     * @param event ImageModalEvent is the event payload
     */
    emitLastImage(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitLastImage(event);
    }
    /**
     * Method to emit hasData event.
     * @param event ImageModalEvent is the event payload
     */
    emitHasData(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitHasData(event);
    }
    /**
     * Method to emit buttonBeforeHook event.
     * @param event ButtonEvent is the event payload
     */
    emitButtonBeforeHook(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitButtonBeforeHook(event);
    }
    /**
     * Method to emit buttonAfterHook event.
     * @param event ButtonEvent is the event payload
     */
    emitButtonAfterHook(event) {
        if (!this.dialogRef) {
            return;
        }
        this.dialogRef.emitButtonAfterHook(event);
    }
    /**
     * Private method to create an Overlay using Angular CDK APIs
     * @private
     */
    createOverlay() {
        const overlayConfig = this.getOverlayConfig();
        return this.overlay.create(overlayConfig);
    }
    /**
     * Private method to create an OverlayConfig instance
     * @private
     */
    getOverlayConfig() {
        const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
        return new OverlayConfig({
            hasBackdrop: DEFAULT_DIALOG_CONFIG.hasBackdrop,
            backdropClass: DEFAULT_DIALOG_CONFIG.backdropClass,
            panelClass: DEFAULT_DIALOG_CONFIG.panelClass,
            scrollStrategy: this.overlay.scrollStrategies.block(),
            positionStrategy
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.5", ngImport: i0, type: ModalGalleryService, deps: [{ token: i1.Overlay }, { token: i2.ConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.5", ngImport: i0, type: ModalGalleryService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.5", ngImport: i0, type: ModalGalleryService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i2.ConfigService }] });
//# sourceMappingURL=data:application/json;base64,